<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rspec | J.Wo]]></title>
  <link href="http://jessewolgamott.com/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://jessewolgamott.com/"/>
  <updated>2016-08-12T10:16:05-05:00</updated>
  <id>http://jessewolgamott.com/</id>
  <author>
    <name><![CDATA[Jesse Wolgamott]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The one where we DRY up Mongoid and Rspec using Shared Examples and Modules]]></title>
    <link href="http://jessewolgamott.com/blog/2012/02/29/the-one-where-we-dry-up-mongoid-and-rspec-using-shared-examples-and-modules/"/>
    <updated>2012-02-29T10:19:00-06:00</updated>
    <id>http://jessewolgamott.com/blog/2012/02/29/the-one-where-we-dry-up-mongoid-and-rspec-using-shared-examples-and-modules</id>
    <content type="html"><![CDATA[<p>The Situation: You’re adding Addresses to seemingly every document you have. Doctors, Patients, Insurance Agents. Even the Delivery Man – everybody has a contact.</p>

<p>The Problem: You’re tempted to copy/paste the field and validations, but your spidy-senses tell you not to.</p>

<p>Let’s DRY this up using modules and rspec shared examples. We’ll end up with a way you <em>could</em> enable fast rails tests on your Mongoid models.</p>

<!-- more -->

<div class="tldr">
	<span class="heading">tl;dr</span> Shared examples describing a module. Include module in a mongoid class: <a href="https://gist.github.com/1942427">The Gist</a>.
</div>

<h2 id="some-assumptions-before-we-begin">Some Assumptions Before We Begin</h2>

<ol>
  <li>You have a project setup with Mongoid (2.2+, Rspec 2.8+, and rspec-mongoid)</li>
  <li>You are awesome</li>
</ol>

<p>OK, so we would normally have a model for the Doctor like so:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">class</span> <span class="class">Doctor</span>
    include <span class="constant">Mongoid</span>::<span class="constant">Document</span>
    include <span class="constant">Mongoid</span>::<span class="constant">Timestamps</span>

    field <span class="symbol">:first_name</span>, <span class="key">type</span>: <span class="constant">String</span>
    field <span class="symbol">:last_name</span>, <span class="key">type</span>: <span class="constant">String</span>
    field <span class="symbol">:phone_number</span>, <span class="key">type</span>: <span class="constant">String</span>
    field <span class="symbol">:address_line_1</span>, <span class="key">type</span>: <span class="constant">String</span>
    field <span class="symbol">:city</span>, <span class="key">type</span>: <span class="constant">String</span>
    field <span class="symbol">:state</span>, <span class="key">type</span>: <span class="constant">String</span>
    field <span class="symbol">:postal_code</span>, <span class="key">type</span>: string
    field <span class="symbol">:email</span>, type <span class="symbol">:String</span>
    validates_presence_of <span class="symbol">:last_name</span>
    validates_presence_of <span class="symbol">:first_name</span>
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<h3 id="step-1-write-those-tests-first">Step 1: Write those tests first</h3>

<div><div class="CodeRay">
  <div class="code"><pre>require <span class="string"><span class="delimiter">'</span><span class="content">spec_helper</span><span class="delimiter">'</span></span>

describe <span class="constant">Doctor</span> <span class="keyword">do</span>
    it { should have_fields(<span class="symbol">:first_name</span>, <span class="symbol">:last_name</span>) }
    it { should have_fields(<span class="symbol">:phone_number</span>, <span class="symbol">:email</span>, <span class="symbol">:address_line_1</span>, <span class="symbol">:city</span>, <span class="symbol">:state</span>, <span class="symbol">:postal_code</span>) }
    it { should validate_presence_of(<span class="symbol">:first_name</span>) }
    it { should validate_presence_of(<span class="symbol">:last_name</span>) }
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>Note: If this doesn’t pass, you may need to add  configuration.include Mongoid::Matchers in your rspec. See the <a href="https://github.com/evansagge/mongoid-rspec">mongoid-rspec gem</a> for use.</p>

<h3 id="step-the-second-extract-the-mongoid-definitions">Step The Second: Extract the mongoid definitions</h3>

<div><div class="CodeRay">
  <div class="code"><pre>require <span class="string"><span class="delimiter">'</span><span class="content">spec_helper</span><span class="delimiter">'</span></span>

<span class="keyword">module</span> <span class="class">Contactable</span>

  <span class="keyword">def</span> <span class="predefined-constant">self</span>.<span class="function">included</span>(receiver) 
    receiver.class_eval <span class="keyword">do</span>
      field <span class="symbol">:first_name</span>, <span class="key">type</span>: <span class="constant">String</span>
      field <span class="symbol">:last_name</span>, <span class="key">type</span>: <span class="constant">String</span>
      field <span class="symbol">:phone_number</span>, <span class="key">type</span>: <span class="constant">String</span>
      field <span class="symbol">:address_line_1</span>, <span class="key">type</span>: <span class="constant">String</span>
      field <span class="symbol">:city</span>, <span class="key">type</span>: <span class="constant">String</span>
      field <span class="symbol">:state</span>, <span class="key">type</span>: <span class="constant">String</span>
      field <span class="symbol">:postal_code</span>, <span class="key">type</span>: <span class="constant">String</span>
      field <span class="symbol">:email</span>, <span class="key">type</span>: <span class="constant">String</span>
      validates_presence_of <span class="symbol">:first_name</span>
      validates_presence_of <span class="symbol">:last_name</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>

<span class="keyword">class</span> <span class="class">Doctor</span>
  include <span class="constant">Mongoid</span>::<span class="constant">Document</span>
  include <span class="constant">Mongoid</span>::<span class="constant">Timestamps</span>
  include <span class="constant">Contactable</span>
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>And run those tests!</p>

<pre><code>....

Finished in 0.11461 seconds
4 examples, 0 failures
</code></pre>

<h3 id="step-3-extract-the-tests">Step 3: Extract the Tests!</h3>

<p>We’ll extract the tests out into a shared_examples file in the support folder, and then tell the Doctor class that it should behave like a Contact. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="comment">#spec/support/shared_examples.rb</span>
shared_examples_for <span class="constant">Contactable</span> <span class="keyword">do</span>
    it { should have_fields(<span class="symbol">:first_name</span>, <span class="symbol">:last_name</span>) }
    it { should have_fields(<span class="symbol">:phone_number</span>, <span class="symbol">:email</span>, <span class="symbol">:address_line_1</span>, <span class="symbol">:city</span>, <span class="symbol">:state</span>, <span class="symbol">:postal_code</span>) }
    it { should validate_presence_of(<span class="symbol">:first_name</span>) }
    it { should validate_presence_of(<span class="symbol">:last_name</span>) }
<span class="keyword">end</span>

<span class="comment">#spec/models/doctor_spec.rb</span>

require <span class="string"><span class="delimiter">'</span><span class="content">spec_helper</span><span class="delimiter">'</span></span>
describe <span class="constant">Doctor</span> <span class="keyword">do</span>
    it_behaves_like <span class="constant">Contactable</span>
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>Run those tests!  Could be faster</p>

<pre><code>....

Finished in 0.13347 seconds
4 examples, 0 failures
</code></pre>

<p>All is going awesome! So we can now easily add contact information (and validations), to say users:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">class</span> <span class="class">User</span>
  include <span class="constant">Mongoid</span>::<span class="constant">Document</span>
  include <span class="constant">Mongoid</span>::<span class="constant">Timestamps</span>
  include <span class="constant">Contactable</span>
<span class="keyword">end</span>

describe <span class="constant">User</span> <span class="keyword">do</span>
  it_behaves_like <span class="constant">Contactable</span>
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>Now your Users have first_name, last_name, address, and more!</p>

<h3 id="lets-take-this-to-11">Let’s Take this to 11</h3>

<p>Now we can very, very easily isolate the Doctor out for very fast tests.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">module</span> <span class="class">Mongoid</span>
    <span class="keyword">module</span> <span class="class">Document</span>; <span class="keyword">end</span>
  <span class="keyword">module</span> <span class="class">Timestamps</span>; <span class="keyword">end</span>
<span class="keyword">end</span>
<span class="keyword">class</span> <span class="class">Pharmacy</span>; <span class="keyword">end</span>

require_relative <span class="string"><span class="delimiter">&quot;</span><span class="content">../../app/models/doctor</span><span class="delimiter">&quot;</span></span>
require_relative <span class="string"><span class="delimiter">&quot;</span><span class="content">support/shared_examples</span><span class="delimiter">&quot;</span></span>

describe <span class="constant">Doctor</span> <span class="keyword">do</span>
  it_behaves_like <span class="constant">Contactable</span>

    it <span class="string"><span class="delimiter">&quot;</span><span class="content">will tell the pharmacy to release the rx's</span><span class="delimiter">&quot;</span></span> <span class="keyword">do</span>
        <span class="constant">Pharmacy</span>.should_receive(<span class="symbol">:release_the_rx!</span>)
        subject.gimme!
    <span class="keyword">end</span>
<span class="keyword">end</span>

</pre></div>
</div>
</div>

<p>The above would fail since #gimme! doesn’t exist, but it would be:</p>

<ul>
  <li>In total isolation from Rails</li>
  <li>Total isolation from Mongo DB</li>
  <li>fast!</li>
</ul>

<p>I created the following to easily add re-usable data-bags to documents in Mongoid, rather than copying and pasting. The same shared-example technique works well in ActiveRecord.</p>

<h6 id="version-disclosure-written-against-mongoid-rspec-14-mongoid-24-rspec-28">Version Disclosure: written against mongoid-rspec 1.4, mongoid 2.4, rspec 2.8.</h6>

]]></content>
  </entry>
  
</feed>
