<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rspec | J.Wo]]></title>
  <link href="http://jessewolgamott.com/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://jessewolgamott.com/"/>
  <updated>2014-05-06T10:40:36-05:00</updated>
  <id>http://jessewolgamott.com/</id>
  <author>
    <name><![CDATA[Jesse Wolgamott]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The one where we DRY up Mongoid and Rspec using Shared Examples and Modules]]></title>
    <link href="http://jessewolgamott.com/blog/2012/02/29/the-one-where-we-dry-up-mongoid-and-rspec-using-shared-examples-and-modules/"/>
    <updated>2012-02-29T10:19:00-06:00</updated>
    <id>http://jessewolgamott.com/blog/2012/02/29/the-one-where-we-dry-up-mongoid-and-rspec-using-shared-examples-and-modules</id>
    <content type="html"><![CDATA[<p>The Situation: You're adding Addresses to seemingly every document you have. Doctors, Patients, Insurance Agents. Even the Delivery Man -- everybody has a contact.</p>

<p>The Problem: You're tempted to copy/paste the field and validations, but your spidy-senses tell you not to.</p>

<p>Let's DRY this up using modules and rspec shared examples. We'll end up with a way you <em>could</em> enable fast rails tests on your Mongoid models.</p>

<!-- more -->




<div class="tldr">
    <span class="heading">tl;dr</span> Shared examples describing a module. Include module in a mongoid class: <a href="https://gist.github.com/1942427">The Gist</a>.
</div>


<h2>Some Assumptions Before We Begin</h2>

<ol>
<li>You have a project setup with Mongoid (2.2+, Rspec 2.8+, and rspec-mongoid)</li>
<li>You are awesome</li>
</ol>


<p>OK, so we would normally have a model for the Doctor like so:</p>

<p>``` ruby</p>

<p>class Doctor</p>

<pre><code>include Mongoid::Document
include Mongoid::Timestamps

field :first_name, type: String
field :last_name, type: String
field :phone_number, type: String
field :address_line_1, type: String
field :city, type: String
field :state, type: String
field :postal_code, type: string
field :email, type :String
validates_presence_of :last_name
validates_presence_of :first_name
</code></pre>

<p>end
```</p>

<h3>Step 1: Write those tests first</h3>

<p>``` ruby
require 'spec_helper'</p>

<p>describe Doctor do</p>

<pre><code>it { should have_fields(:first_name, :last_name) }
it { should have_fields(:phone_number, :email, :address_line_1, :city, :state, :postal_code) }
it { should validate_presence_of(:first_name) }
it { should validate_presence_of(:last_name) }
</code></pre>

<p>end</p>

<p>```</p>

<p>Note: If this doesn't pass, you may need to add  configuration.include Mongoid::Matchers in your rspec. See the <a href="https://github.com/evansagge/mongoid-rspec">mongoid-rspec gem</a> for use.</p>

<h3>Step The Second: Extract the mongoid definitions</h3>

<p>``` ruby
require 'spec_helper'</p>

<p>module Contactable</p>

<p>  def self.included(receiver)</p>

<pre><code>receiver.class_eval do
  field :first_name, type: String
  field :last_name, type: String
  field :phone_number, type: String
  field :address_line_1, type: String
  field :city, type: String
  field :state, type: String
  field :postal_code, type: String
  field :email, type: String
  validates_presence_of :first_name
  validates_presence_of :last_name
end
</code></pre>

<p>  end
end</p>

<p>class Doctor
  include Mongoid::Document
  include Mongoid::Timestamps
  include Contactable
end
```</p>

<p>And run those tests!</p>

<p>``` ruby
....</p>

<p>Finished in 0.11461 seconds
4 examples, 0 failures
```</p>

<h3>Step 3: Extract the Tests!</h3>

<p>We'll extract the tests out into a shared_examples file in the support folder, and then tell the Doctor class that it should behave like a Contact.</p>

<p>``` ruby</p>

<h1>spec/support/shared_examples.rb</h1>

<p>shared_examples_for Contactable do</p>

<pre><code>it { should have_fields(:first_name, :last_name) }
it { should have_fields(:phone_number, :email, :address_line_1, :city, :state, :postal_code) }
it { should validate_presence_of(:first_name) }
it { should validate_presence_of(:last_name) }
</code></pre>

<p>end</p>

<h1>spec/models/doctor_spec.rb</h1>

<p>require 'spec_helper'
describe Doctor do</p>

<pre><code>it_behaves_like Contactable
</code></pre>

<p>end
```</p>

<p>Run those tests!
``` ruby tests. Could be faster
....</p>

<p>Finished in 0.13347 seconds
4 examples, 0 failures
```</p>

<p>All is going awesome! So we can now easily add contact information (and validations), to say users:</p>

<p>``` ruby
class User
  include Mongoid::Document
  include Mongoid::Timestamps
  include Contactable
end</p>

<p>describe User do
  it_behaves_like Contactable
end
```</p>

<p>Now your Users have first_name, last_name, address, and more!</p>

<h3>Let's Take this to 11</h3>

<p>Now we can very, very easily isolate the Doctor out for very fast tests.</p>

<p>``` ruby
module Mongoid</p>

<pre><code>module Document; end
</code></pre>

<p>  module Timestamps; end
end
class Pharmacy; end</p>

<p>require_relative "../../app/models/doctor"
require_relative "support/shared_examples"</p>

<p>describe Doctor do
  it_behaves_like Contactable</p>

<pre><code>it "will tell the pharmacy to release the rx's" do
    Pharmacy.should_receive(:release_the_rx!)
    subject.gimme!
end
</code></pre>

<p>end</p>

<p>```</p>

<p>The above would fail since #gimme! doesn't exist, but it would be:</p>

<ul>
<li>In total isolation from Rails</li>
<li>Total isolation from Mongo DB</li>
<li>fast!</li>
</ul>


<p>I created the following to easily add re-usable data-bags to documents in Mongoid, rather than copying and pasting. The same shared-example technique works well in ActiveRecord.</p>

<h6>Version Disclosure: written against mongoid-rspec 1.4, mongoid 2.4, rspec 2.8.</h6>
]]></content>
  </entry>
  
</feed>
